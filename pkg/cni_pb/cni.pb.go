// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cni.proto

/*
Package cni is a generated protocol buffer package.

Package cni provides remote CNI functionality over gRPC. It follows
the CNI specification at https://github.com/containernetworking/cni/blob/master/SPEC.md

It is generated from these files:
	cni.proto

It has these top-level messages:
	CNIRequest
	CNIReply
*/
package cni

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CNIReply_Interface_IP_Version int32

const (
	CNIReply_Interface_IP_IPV4 CNIReply_Interface_IP_Version = 0
	CNIReply_Interface_IP_IPV6 CNIReply_Interface_IP_Version = 1
)

var CNIReply_Interface_IP_Version_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}
var CNIReply_Interface_IP_Version_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x CNIReply_Interface_IP_Version) String() string {
	return proto.EnumName(CNIReply_Interface_IP_Version_name, int32(x))
}
func (CNIReply_Interface_IP_Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 0, 0}
}

// The request to add a container to network. Corresponds to the CNI specification
// at https://github.com/containernetworking/cni/blob/master/SPEC.md#parameters
type CNIRequest struct {
	// The version of CNI spec that the caller is using (container management system or the invoking plugin).
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Container ID unique across an administrative domain while the container is live.
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	// Path to the network namespace to be added, i.e. /proc/[pid]/ns/net or a bind-mount/link to it.
	NetworkNamespace string `protobuf:"bytes,3,opt,name=network_namespace,json=networkNamespace" json:"network_namespace,omitempty"`
	// Name of the interface inside the container. This is the name that should be assigned to the interface created inside the container (network namespace); consequently it must comply with the standard Linux restrictions on interface names.
	InterfaceName string                    `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	NetworkConfig *CNIRequest_NetworkConfig `protobuf:"bytes,5,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	// Extra arguments passed to CNI plugin. Optional.
	ExtraArguments string `protobuf:"bytes,6,opt,name=extra_arguments,json=extraArguments" json:"extra_arguments,omitempty"`
	// IPAM type (plugin name) configured for the CNI.
	IpamType string `protobuf:"bytes,7,opt,name=ipam_type,json=ipamType" json:"ipam_type,omitempty"`
	// result of the IPAM plugin if it was configured for the CNI.
	IpamData string `protobuf:"bytes,8,opt,name=ipam_data,json=ipamData" json:"ipam_data,omitempty"`
}

func (m *CNIRequest) Reset()                    { *m = CNIRequest{} }
func (m *CNIRequest) String() string            { return proto.CompactTextString(m) }
func (*CNIRequest) ProtoMessage()               {}
func (*CNIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CNIRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CNIRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CNIRequest) GetNetworkNamespace() string {
	if m != nil {
		return m.NetworkNamespace
	}
	return ""
}

func (m *CNIRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *CNIRequest) GetNetworkConfig() *CNIRequest_NetworkConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *CNIRequest) GetExtraArguments() string {
	if m != nil {
		return m.ExtraArguments
	}
	return ""
}

func (m *CNIRequest) GetIpamType() string {
	if m != nil {
		return m.IpamType
	}
	return ""
}

func (m *CNIRequest) GetIpamData() string {
	if m != nil {
		return m.IpamData
	}
	return ""
}

// Network configuration. This is a JSON document describing a network to which a container can be joined.
type CNIRequest_NetworkConfig struct {
	// version of CNI specification
	CniVersion string `protobuf:"bytes,1,opt,name=cniVersion" json:"cniVersion,omitempty"`
	// Network name which is unique across all containers on the host
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Filename of CNI plugin executable
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// Additional dictionary arguments provided by container runtime (optional)
	Args map[string]string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Sets up IP masquerade on the host for this network. Optional.
	IpMasq bool          `protobuf:"varint,5,opt,name=ipMasq" json:"ipMasq,omitempty"`
	Dns    *CNIReply_DNS `protobuf:"bytes,6,opt,name=dns" json:"dns,omitempty"`
}

func (m *CNIRequest_NetworkConfig) Reset()                    { *m = CNIRequest_NetworkConfig{} }
func (m *CNIRequest_NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*CNIRequest_NetworkConfig) ProtoMessage()               {}
func (*CNIRequest_NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CNIRequest_NetworkConfig) GetCniVersion() string {
	if m != nil {
		return m.CniVersion
	}
	return ""
}

func (m *CNIRequest_NetworkConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CNIRequest_NetworkConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CNIRequest_NetworkConfig) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CNIRequest_NetworkConfig) GetIpMasq() bool {
	if m != nil {
		return m.IpMasq
	}
	return false
}

func (m *CNIRequest_NetworkConfig) GetDns() *CNIReply_DNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

// The response to the CNIRequest. Corresponds to the CNI specification
// at https://github.com/containernetworking/cni/blob/master/SPEC.md#parameters
type CNIReply struct {
	// Result code. 0 = success, non-zero = error.
	Result uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	// Error string in case that result != 0.
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// List of interfaces connected to the container.
	Interfaces []*CNIReply_Interface `protobuf:"bytes,4,rep,name=interfaces" json:"interfaces,omitempty"`
	// List of routes configured in the container.
	Routes []*CNIReply_Route `protobuf:"bytes,5,rep,name=routes" json:"routes,omitempty"`
	// DNS entries. Repeated only because it is optional, normally there should be only one dns member.
	Dns []*CNIReply_DNS `protobuf:"bytes,6,rep,name=dns" json:"dns,omitempty"`
}

func (m *CNIReply) Reset()                    { *m = CNIReply{} }
func (m *CNIReply) String() string            { return proto.CompactTextString(m) }
func (*CNIReply) ProtoMessage()               {}
func (*CNIReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CNIReply) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CNIReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CNIReply) GetInterfaces() []*CNIReply_Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *CNIReply) GetRoutes() []*CNIReply_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CNIReply) GetDns() []*CNIReply_DNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

// Interface details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#result
type CNIReply_Interface struct {
	// Name if the interface.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// MAC address of the interface.
	Mac string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	// Details about the sandbox (if any) the interface is in. Can be a netns path, empty/omitted for host interfaces.
	Sandbox string `protobuf:"bytes,3,opt,name=sandbox" json:"sandbox,omitempty"`
	// List of IP addresses applied on the interface.
	IpAddresses []*CNIReply_Interface_IP `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
}

func (m *CNIReply_Interface) Reset()                    { *m = CNIReply_Interface{} }
func (m *CNIReply_Interface) String() string            { return proto.CompactTextString(m) }
func (*CNIReply_Interface) ProtoMessage()               {}
func (*CNIReply_Interface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CNIReply_Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CNIReply_Interface) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *CNIReply_Interface) GetSandbox() string {
	if m != nil {
		return m.Sandbox
	}
	return ""
}

func (m *CNIReply_Interface) GetIpAddresses() []*CNIReply_Interface_IP {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

// IP address details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#ips
type CNIReply_Interface_IP struct {
	// IP version.
	Version CNIReply_Interface_IP_Version `protobuf:"varint,1,opt,name=version,enum=cni.CNIReply_Interface_IP_Version" json:"version,omitempty"`
	// IP address in CIDR notation (eg "192.168.1.3/24").
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The default gateway for this subnet, if one exists.
	Gateway string `protobuf:"bytes,3,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *CNIReply_Interface_IP) Reset()                    { *m = CNIReply_Interface_IP{} }
func (m *CNIReply_Interface_IP) String() string            { return proto.CompactTextString(m) }
func (*CNIReply_Interface_IP) ProtoMessage()               {}
func (*CNIReply_Interface_IP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

func (m *CNIReply_Interface_IP) GetVersion() CNIReply_Interface_IP_Version {
	if m != nil {
		return m.Version
	}
	return CNIReply_Interface_IP_IPV4
}

func (m *CNIReply_Interface_IP) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CNIReply_Interface_IP) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

// Route details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#routes
type CNIReply_Route struct {
	// Destination subnet specified in CIDR notation.
	Dst string `protobuf:"bytes,1,opt,name=dst" json:"dst,omitempty"`
	// IP of the gateway. If omitted, a default gateway is assumed.
	Gw string `protobuf:"bytes,2,opt,name=gw" json:"gw,omitempty"`
}

func (m *CNIReply_Route) Reset()                    { *m = CNIReply_Route{} }
func (m *CNIReply_Route) String() string            { return proto.CompactTextString(m) }
func (*CNIReply_Route) ProtoMessage()               {}
func (*CNIReply_Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *CNIReply_Route) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *CNIReply_Route) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

// DNS details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#dns
type CNIReply_DNS struct {
	// The local domain used for short hostname lookups.
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// List of a priority-ordered list of DNS nameservers that this network is aware of.
	Nameservers []string `protobuf:"bytes,2,rep,name=nameservers" json:"nameservers,omitempty"`
	// List of priority ordered search domains for short hostname lookups. Will be preferred over domain by most resolvers.
	Search []string `protobuf:"bytes,3,rep,name=search" json:"search,omitempty"`
	// List of options that can be passed to the resolver.
	Options []string `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
}

func (m *CNIReply_DNS) Reset()                    { *m = CNIReply_DNS{} }
func (m *CNIReply_DNS) String() string            { return proto.CompactTextString(m) }
func (*CNIReply_DNS) ProtoMessage()               {}
func (*CNIReply_DNS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *CNIReply_DNS) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CNIReply_DNS) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *CNIReply_DNS) GetSearch() []string {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *CNIReply_DNS) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*CNIRequest)(nil), "cni.CNIRequest")
	proto.RegisterType((*CNIRequest_NetworkConfig)(nil), "cni.CNIRequest.NetworkConfig")
	proto.RegisterType((*CNIReply)(nil), "cni.CNIReply")
	proto.RegisterType((*CNIReply_Interface)(nil), "cni.CNIReply.Interface")
	proto.RegisterType((*CNIReply_Interface_IP)(nil), "cni.CNIReply.Interface.IP")
	proto.RegisterType((*CNIReply_Route)(nil), "cni.CNIReply.Route")
	proto.RegisterType((*CNIReply_DNS)(nil), "cni.CNIReply.DNS")
	proto.RegisterEnum("cni.CNIReply_Interface_IP_Version", CNIReply_Interface_IP_Version_name, CNIReply_Interface_IP_Version_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteCNI service

type RemoteCNIClient interface {
	// The request to add a container to network.
	Add(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error)
	// The request to delete a container from network.
	Delete(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error)
}

type remoteCNIClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCNIClient(cc *grpc.ClientConn) RemoteCNIClient {
	return &remoteCNIClient{cc}
}

func (c *remoteCNIClient) Add(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error) {
	out := new(CNIReply)
	err := grpc.Invoke(ctx, "/cni.RemoteCNI/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCNIClient) Delete(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error) {
	out := new(CNIReply)
	err := grpc.Invoke(ctx, "/cni.RemoteCNI/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteCNI service

type RemoteCNIServer interface {
	// The request to add a container to network.
	Add(context.Context, *CNIRequest) (*CNIReply, error)
	// The request to delete a container from network.
	Delete(context.Context, *CNIRequest) (*CNIReply, error)
}

func RegisterRemoteCNIServer(s *grpc.Server, srv RemoteCNIServer) {
	s.RegisterService(&_RemoteCNI_serviceDesc, srv)
}

func _RemoteCNI_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCNIServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.RemoteCNI/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCNIServer).Add(ctx, req.(*CNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCNI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCNIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.RemoteCNI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCNIServer).Delete(ctx, req.(*CNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteCNI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cni.RemoteCNI",
	HandlerType: (*RemoteCNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RemoteCNI_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RemoteCNI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cni.proto",
}

func init() { proto.RegisterFile("cni.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0x13, 0x3d,
	0x10, 0x6e, 0x76, 0xf3, 0x39, 0x69, 0xd2, 0xd4, 0xef, 0xab, 0xf7, 0xb5, 0x82, 0x8a, 0x42, 0x10,
	0x6a, 0xa1, 0xd2, 0x1e, 0x02, 0xa2, 0x88, 0x8f, 0x43, 0xd4, 0x70, 0xd8, 0x03, 0x51, 0xb5, 0x45,
	0xbd, 0x06, 0x77, 0xd7, 0x5d, 0xac, 0x26, 0xde, 0xad, 0xed, 0x34, 0xcd, 0x1f, 0xe0, 0xc0, 0x9d,
	0x3f, 0xc0, 0x5f, 0xe2, 0x0f, 0x21, 0x3b, 0xf6, 0x26, 0x41, 0x6a, 0xb9, 0xf9, 0x99, 0x79, 0x66,
	0x3c, 0xcf, 0x78, 0xc6, 0xd0, 0x88, 0x39, 0x0b, 0x72, 0x91, 0xa9, 0x0c, 0xf9, 0x31, 0x67, 0xfd,
	0x5f, 0x65, 0x80, 0xd3, 0x71, 0x18, 0xd1, 0x9b, 0x39, 0x95, 0x0a, 0x61, 0xa8, 0xdd, 0x52, 0x21,
	0x59, 0xc6, 0x71, 0xa9, 0x57, 0x3a, 0x6a, 0x44, 0x0e, 0xa2, 0x27, 0xb0, 0x1b, 0x67, 0x5c, 0x11,
	0xc6, 0xa9, 0x98, 0xb0, 0x04, 0x7b, 0xc6, 0xdd, 0x2c, 0x6c, 0x61, 0x82, 0x8e, 0x61, 0x9f, 0x53,
	0xb5, 0xc8, 0xc4, 0xf5, 0x84, 0x93, 0x19, 0x95, 0x39, 0x89, 0x29, 0xf6, 0x0d, 0xaf, 0x63, 0x1d,
	0x63, 0x67, 0x47, 0xcf, 0xa0, 0xcd, 0xb8, 0xa2, 0xe2, 0x8a, 0xc4, 0xd4, 0xd0, 0x71, 0xd9, 0x30,
	0x5b, 0x85, 0x55, 0x73, 0xd1, 0x08, 0xda, 0x2e, 0x67, 0x9c, 0xf1, 0x2b, 0x96, 0xe2, 0x4a, 0xaf,
	0x74, 0xd4, 0x1c, 0x1c, 0x04, 0x5a, 0xc8, 0xba, 0xf2, 0x60, 0xbc, 0x62, 0x9d, 0x1a, 0x52, 0xd4,
	0xe2, 0x9b, 0x10, 0x1d, 0xc2, 0x1e, 0xbd, 0x53, 0x82, 0x4c, 0x88, 0x48, 0xe7, 0x33, 0xca, 0x95,
	0xc4, 0x55, 0x73, 0x5b, 0xdb, 0x98, 0x87, 0xce, 0x8a, 0x1e, 0x41, 0x83, 0xe5, 0x64, 0x36, 0x51,
	0xcb, 0x9c, 0xe2, 0x9a, 0xa1, 0xd4, 0xb5, 0xe1, 0xf3, 0x32, 0xa7, 0x85, 0x33, 0x21, 0x8a, 0xe0,
	0xfa, 0xda, 0x39, 0x22, 0x8a, 0x74, 0xbf, 0x7b, 0xd0, 0xda, 0xaa, 0x01, 0x3d, 0x06, 0x88, 0x39,
	0xbb, 0xd8, 0x6a, 0xe7, 0x86, 0x05, 0x21, 0x28, 0x1b, 0xdd, 0xab, 0x4e, 0x9a, 0xb3, 0xb6, 0x99,
	0xab, 0x57, 0x5d, 0x33, 0x67, 0xf4, 0x0e, 0xca, 0x44, 0xa4, 0x12, 0x97, 0x7b, 0xfe, 0x51, 0x73,
	0x70, 0xf8, 0xa0, 0xf0, 0x60, 0x28, 0x52, 0xf9, 0x91, 0x2b, 0xb1, 0x8c, 0x4c, 0x10, 0xfa, 0x0f,
	0xaa, 0x2c, 0xff, 0x44, 0xe4, 0x8d, 0xe9, 0x5b, 0x3d, 0xb2, 0x08, 0x3d, 0x05, 0x3f, 0xe1, 0xab,
	0x2e, 0x34, 0x07, 0xfb, 0xeb, 0x9c, 0xf9, 0x74, 0x19, 0x8c, 0xc6, 0xe7, 0x91, 0xf6, 0x76, 0x4f,
	0xa0, 0x51, 0xe4, 0x43, 0x1d, 0xf0, 0xaf, 0xe9, 0xd2, 0xea, 0xd0, 0x47, 0xf4, 0x2f, 0x54, 0x6e,
	0xc9, 0x74, 0xee, 0x14, 0xac, 0xc0, 0x5b, 0xef, 0x4d, 0xa9, 0xff, 0xad, 0x02, 0x75, 0x97, 0x4e,
	0x97, 0x20, 0xa8, 0x9c, 0x4f, 0x95, 0x89, 0x6d, 0x45, 0x16, 0xe9, 0x70, 0x2a, 0x44, 0x26, 0x5c,
	0xb8, 0x01, 0xe8, 0x04, 0xa0, 0x98, 0x00, 0xa7, 0xf9, 0xff, 0xed, 0xfa, 0x42, 0xe7, 0x8f, 0x36,
	0xa8, 0xe8, 0x18, 0xaa, 0x22, 0x9b, 0x2b, 0x2a, 0x71, 0xc5, 0x04, 0xfd, 0xb3, 0x1d, 0x14, 0x69,
	0x5f, 0x64, 0x29, 0x6b, 0xf9, 0xfe, 0x03, 0xf2, 0x7f, 0x7a, 0xd0, 0x28, 0xee, 0x2a, 0x9e, 0xab,
	0xb4, 0xf1, 0x5c, 0x1d, 0xf0, 0x67, 0x24, 0xb6, 0x02, 0xf4, 0x51, 0x2f, 0x90, 0x24, 0x3c, 0xb9,
	0xcc, 0xee, 0xec, 0x1b, 0x3a, 0x88, 0x3e, 0xc0, 0x2e, 0xcb, 0x27, 0x24, 0x49, 0x04, 0x95, 0xb2,
	0x90, 0xd6, 0xbd, 0x47, 0x5a, 0x10, 0x9e, 0x45, 0x4d, 0x96, 0x0f, 0x1d, 0xbd, 0xfb, 0xa3, 0x04,
	0x5e, 0x78, 0x86, 0xde, 0x6f, 0x2f, 0x68, 0x7b, 0xd0, 0xbf, 0x3f, 0x41, 0x60, 0x27, 0x6d, 0xbd,
	0xc4, 0x18, 0x6a, 0xb6, 0x00, 0x5b, 0xb3, 0x83, 0xda, 0x93, 0x12, 0x45, 0x17, 0x64, 0xe9, 0xea,
	0xb6, 0xb0, 0x7f, 0x00, 0x35, 0x37, 0xb1, 0x75, 0x28, 0x87, 0x67, 0x17, 0xaf, 0x3a, 0x3b, 0xf6,
	0xf4, 0xba, 0x53, 0xea, 0x3e, 0x87, 0x8a, 0x69, 0xad, 0xee, 0x45, 0x22, 0x95, 0x9b, 0x8f, 0x44,
	0x2a, 0xd4, 0x06, 0x2f, 0x5d, 0xd8, 0x8b, 0xbc, 0x74, 0xd1, 0xbd, 0x01, 0x7f, 0x34, 0x3e, 0xd7,
	0xf3, 0x90, 0x64, 0x33, 0xc2, 0xdc, 0x4e, 0x58, 0x84, 0x7a, 0xd0, 0x34, 0xdf, 0x06, 0x15, 0xba,
	0x5c, 0xec, 0xf5, 0x7c, 0xfd, 0xc1, 0x6c, 0x98, 0x74, 0xa4, 0xa4, 0x44, 0xc4, 0x5f, 0xb1, 0x6f,
	0x9c, 0x16, 0xe9, 0xe2, 0xb3, 0x5c, 0xb1, 0x8c, 0xaf, 0xba, 0xda, 0x88, 0x1c, 0x1c, 0x7c, 0x81,
	0x46, 0x44, 0x67, 0x99, 0xa2, 0xa7, 0xe3, 0x10, 0x1d, 0x82, 0x3f, 0x4c, 0x12, 0xb4, 0xf7, 0xc7,
	0x06, 0x75, 0x5b, 0x5b, 0x2d, 0xec, 0xef, 0xa0, 0x17, 0x50, 0x1d, 0xd1, 0x29, 0x55, 0xf4, 0xef,
	0xdc, 0xcb, 0xaa, 0xf9, 0x4c, 0x5f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x67, 0xf1, 0x26, 0x4b,
	0x59, 0x05, 0x00, 0x00,
}
